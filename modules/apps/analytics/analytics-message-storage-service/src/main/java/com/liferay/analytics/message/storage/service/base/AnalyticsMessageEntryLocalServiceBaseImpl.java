/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.analytics.message.storage.service.base;

import com.liferay.analytics.message.storage.model.AnalyticsMessageEntry;
import com.liferay.analytics.message.storage.model.AnalyticsMessageEntryMessageBlobModel;
import com.liferay.analytics.message.storage.service.AnalyticsMessageEntryLocalService;
import com.liferay.analytics.message.storage.service.persistence.AnalyticsMessageEntryPersistence;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the analytics message entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.analytics.message.storage.service.impl.AnalyticsMessageEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.analytics.message.storage.service.impl.AnalyticsMessageEntryLocalServiceImpl
 * @generated
 */
public abstract class AnalyticsMessageEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AnalyticsMessageEntryLocalService, AopService,
			   IdentifiableOSGiService {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>AnalyticsMessageEntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.analytics.message.storage.service.AnalyticsMessageEntryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the analytics message entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param analyticsMessageEntry the analytics message entry
	 * @return the analytics message entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AnalyticsMessageEntry addAnalyticsMessageEntry(
		AnalyticsMessageEntry analyticsMessageEntry) {

		analyticsMessageEntry.setNew(true);

		return analyticsMessageEntryPersistence.update(analyticsMessageEntry);
	}

	/**
	 * Creates a new analytics message entry with the primary key. Does not add the analytics message entry to the database.
	 *
	 * @param analyticsMessageEntryId the primary key for the new analytics message entry
	 * @return the new analytics message entry
	 */
	@Override
	@Transactional(enabled = false)
	public AnalyticsMessageEntry createAnalyticsMessageEntry(
		long analyticsMessageEntryId) {

		return analyticsMessageEntryPersistence.create(analyticsMessageEntryId);
	}

	/**
	 * Deletes the analytics message entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param analyticsMessageEntryId the primary key of the analytics message entry
	 * @return the analytics message entry that was removed
	 * @throws PortalException if a analytics message entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AnalyticsMessageEntry deleteAnalyticsMessageEntry(
			long analyticsMessageEntryId)
		throws PortalException {

		return analyticsMessageEntryPersistence.remove(analyticsMessageEntryId);
	}

	/**
	 * Deletes the analytics message entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param analyticsMessageEntry the analytics message entry
	 * @return the analytics message entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AnalyticsMessageEntry deleteAnalyticsMessageEntry(
		AnalyticsMessageEntry analyticsMessageEntry) {

		return analyticsMessageEntryPersistence.remove(analyticsMessageEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			AnalyticsMessageEntry.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return analyticsMessageEntryPersistence.findWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.analytics.message.storage.model.impl.AnalyticsMessageEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return analyticsMessageEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.analytics.message.storage.model.impl.AnalyticsMessageEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return analyticsMessageEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return analyticsMessageEntryPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return analyticsMessageEntryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public AnalyticsMessageEntry fetchAnalyticsMessageEntry(
		long analyticsMessageEntryId) {

		return analyticsMessageEntryPersistence.fetchByPrimaryKey(
			analyticsMessageEntryId);
	}

	/**
	 * Returns the analytics message entry with the primary key.
	 *
	 * @param analyticsMessageEntryId the primary key of the analytics message entry
	 * @return the analytics message entry
	 * @throws PortalException if a analytics message entry with the primary key could not be found
	 */
	@Override
	public AnalyticsMessageEntry getAnalyticsMessageEntry(
			long analyticsMessageEntryId)
		throws PortalException {

		return analyticsMessageEntryPersistence.findByPrimaryKey(
			analyticsMessageEntryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			analyticsMessageEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AnalyticsMessageEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"analyticsMessageEntryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			analyticsMessageEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(
			AnalyticsMessageEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"analyticsMessageEntryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			analyticsMessageEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AnalyticsMessageEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"analyticsMessageEntryId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return analyticsMessageEntryLocalService.deleteAnalyticsMessageEntry(
			(AnalyticsMessageEntry)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return analyticsMessageEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the analytics message entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.analytics.message.storage.model.impl.AnalyticsMessageEntryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of analytics message entries
	 * @param end the upper bound of the range of analytics message entries (not inclusive)
	 * @return the range of analytics message entries
	 */
	@Override
	public List<AnalyticsMessageEntry> getAnalyticsMessageEntries(
		int start, int end) {

		return analyticsMessageEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of analytics message entries.
	 *
	 * @return the number of analytics message entries
	 */
	@Override
	public int getAnalyticsMessageEntriesCount() {
		return analyticsMessageEntryPersistence.countAll();
	}

	/**
	 * Updates the analytics message entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param analyticsMessageEntry the analytics message entry
	 * @return the analytics message entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AnalyticsMessageEntry updateAnalyticsMessageEntry(
		AnalyticsMessageEntry analyticsMessageEntry) {

		return analyticsMessageEntryPersistence.update(analyticsMessageEntry);
	}

	@Override
	public AnalyticsMessageEntryMessageBlobModel getMessageBlobModel(
		Serializable primaryKey) {

		Session session = null;

		try {
			session = analyticsMessageEntryPersistence.openSession();

			return (AnalyticsMessageEntryMessageBlobModel)session.get(
				AnalyticsMessageEntryMessageBlobModel.class, primaryKey);
		}
		catch (Exception e) {
			throw analyticsMessageEntryPersistence.processException(e);
		}
		finally {
			analyticsMessageEntryPersistence.closeSession(session);
		}
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			AnalyticsMessageEntryLocalService.class,
			IdentifiableOSGiService.class, PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		analyticsMessageEntryLocalService =
			(AnalyticsMessageEntryLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AnalyticsMessageEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AnalyticsMessageEntry.class;
	}

	protected String getModelClassName() {
		return AnalyticsMessageEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				analyticsMessageEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	protected AnalyticsMessageEntryLocalService
		analyticsMessageEntryLocalService;

	@Reference
	protected AnalyticsMessageEntryPersistence analyticsMessageEntryPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

}