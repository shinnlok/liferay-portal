/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.analytics.message.storage.model.impl;

import com.liferay.analytics.message.storage.model.AnalyticsMessageEntry;
import com.liferay.analytics.message.storage.model.AnalyticsMessageEntryMessageBlobModel;
import com.liferay.analytics.message.storage.model.AnalyticsMessageEntryModel;
import com.liferay.analytics.message.storage.service.AnalyticsMessageEntryLocalServiceUtil;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AnalyticsMessageEntry service. Represents a row in the &quot;AnalyticsMessageEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AnalyticsMessageEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnalyticsMessageEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnalyticsMessageEntryImpl
 * @generated
 */
public class AnalyticsMessageEntryModelImpl
	extends BaseModelImpl<AnalyticsMessageEntry>
	implements AnalyticsMessageEntryModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a analytics message entry model instance should use the <code>AnalyticsMessageEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "AnalyticsMessageEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT},
		{"analyticsMessageEntryId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"message", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("analyticsMessageEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("message", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AnalyticsMessageEntry (mvccVersion LONG default 0 not null,analyticsMessageEntryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,message BLOB)";

	public static final String TABLE_SQL_DROP =
		"drop table AnalyticsMessageEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY analyticsMessageEntry.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AnalyticsMessageEntry.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AnalyticsMessageEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _analyticsMessageEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnalyticsMessageEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _analyticsMessageEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnalyticsMessageEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AnalyticsMessageEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnalyticsMessageEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnalyticsMessageEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnalyticsMessageEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnalyticsMessageEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnalyticsMessageEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnalyticsMessageEntry, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnalyticsMessageEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnalyticsMessageEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnalyticsMessageEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AnalyticsMessageEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AnalyticsMessageEntry.class.getClassLoader(),
			AnalyticsMessageEntry.class, ModelWrapper.class);

		try {
			Constructor<AnalyticsMessageEntry> constructor =
				(Constructor<AnalyticsMessageEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<AnalyticsMessageEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnalyticsMessageEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnalyticsMessageEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AnalyticsMessageEntry, Object>>();
		Map<String, BiConsumer<AnalyticsMessageEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AnalyticsMessageEntry, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", AnalyticsMessageEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<AnalyticsMessageEntry, Long>)
				AnalyticsMessageEntry::setMvccVersion);
		attributeGetterFunctions.put(
			"analyticsMessageEntryId",
			AnalyticsMessageEntry::getAnalyticsMessageEntryId);
		attributeSetterBiConsumers.put(
			"analyticsMessageEntryId",
			(BiConsumer<AnalyticsMessageEntry, Long>)
				AnalyticsMessageEntry::setAnalyticsMessageEntryId);
		attributeGetterFunctions.put(
			"companyId", AnalyticsMessageEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AnalyticsMessageEntry, Long>)
				AnalyticsMessageEntry::setCompanyId);
		attributeGetterFunctions.put(
			"userId", AnalyticsMessageEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AnalyticsMessageEntry, Long>)
				AnalyticsMessageEntry::setUserId);
		attributeGetterFunctions.put(
			"userName", AnalyticsMessageEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AnalyticsMessageEntry, String>)
				AnalyticsMessageEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", AnalyticsMessageEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AnalyticsMessageEntry, Date>)
				AnalyticsMessageEntry::setCreateDate);
		attributeGetterFunctions.put(
			"message", AnalyticsMessageEntry::getMessage);
		attributeSetterBiConsumers.put(
			"message",
			(BiConsumer<AnalyticsMessageEntry, Blob>)
				AnalyticsMessageEntry::setMessage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getAnalyticsMessageEntryId() {
		return _analyticsMessageEntryId;
	}

	@Override
	public void setAnalyticsMessageEntryId(long analyticsMessageEntryId) {
		_analyticsMessageEntryId = analyticsMessageEntryId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Blob getMessage() {
		if (_messageBlobModel == null) {
			try {
				_messageBlobModel =
					AnalyticsMessageEntryLocalServiceUtil.getMessageBlobModel(
						getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_messageBlobModel != null) {
			blob = _messageBlobModel.getMessageBlob();
		}

		return blob;
	}

	@Override
	public void setMessage(Blob message) {
		if (_messageBlobModel == null) {
			_messageBlobModel = new AnalyticsMessageEntryMessageBlobModel(
				getPrimaryKey(), message);
		}
		else {
			_messageBlobModel.setMessageBlob(message);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AnalyticsMessageEntry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnalyticsMessageEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AnalyticsMessageEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnalyticsMessageEntryImpl analyticsMessageEntryImpl =
			new AnalyticsMessageEntryImpl();

		analyticsMessageEntryImpl.setMvccVersion(getMvccVersion());
		analyticsMessageEntryImpl.setAnalyticsMessageEntryId(
			getAnalyticsMessageEntryId());
		analyticsMessageEntryImpl.setCompanyId(getCompanyId());
		analyticsMessageEntryImpl.setUserId(getUserId());
		analyticsMessageEntryImpl.setUserName(getUserName());
		analyticsMessageEntryImpl.setCreateDate(getCreateDate());

		analyticsMessageEntryImpl.resetOriginalValues();

		return analyticsMessageEntryImpl;
	}

	@Override
	public int compareTo(AnalyticsMessageEntry analyticsMessageEntry) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), analyticsMessageEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AnalyticsMessageEntry)) {
			return false;
		}

		AnalyticsMessageEntry analyticsMessageEntry =
			(AnalyticsMessageEntry)obj;

		long primaryKey = analyticsMessageEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AnalyticsMessageEntryModelImpl analyticsMessageEntryModelImpl = this;

		analyticsMessageEntryModelImpl._originalCompanyId =
			analyticsMessageEntryModelImpl._companyId;

		analyticsMessageEntryModelImpl._setOriginalCompanyId = false;

		analyticsMessageEntryModelImpl._messageBlobModel = null;

		analyticsMessageEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnalyticsMessageEntry> toCacheModel() {
		AnalyticsMessageEntryCacheModel analyticsMessageEntryCacheModel =
			new AnalyticsMessageEntryCacheModel();

		analyticsMessageEntryCacheModel.mvccVersion = getMvccVersion();

		analyticsMessageEntryCacheModel.analyticsMessageEntryId =
			getAnalyticsMessageEntryId();

		analyticsMessageEntryCacheModel.companyId = getCompanyId();

		analyticsMessageEntryCacheModel.userId = getUserId();

		analyticsMessageEntryCacheModel.userName = getUserName();

		String userName = analyticsMessageEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			analyticsMessageEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			analyticsMessageEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			analyticsMessageEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		return analyticsMessageEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{mvccVersion=");
		sb.append(getMvccVersion());
		sb.append(", analyticsMessageEntryId=");
		sb.append(getAnalyticsMessageEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.analytics.message.storage.model.AnalyticsMessageEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mvccVersion</column-name><column-value><![CDATA[");
		sb.append(getMvccVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analyticsMessageEntryId</column-name><column-value><![CDATA[");
		sb.append(getAnalyticsMessageEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AnalyticsMessageEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _analyticsMessageEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private AnalyticsMessageEntryMessageBlobModel _messageBlobModel;
	private long _columnBitmask;
	private AnalyticsMessageEntry _escapedModel;

}